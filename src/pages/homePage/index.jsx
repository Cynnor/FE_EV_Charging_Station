import { useEffect, useRef, useState } from "react";
import { useNavigate } from "react-router-dom";
import ChargingMap from "../../components/chargingMap";
import "./index.scss";
import api from "../../config/api";

// ===== Static Data =====
const features = [
  {
    icon: "üó∫Ô∏è",
    title: "T√¨m ki·∫øm tr·ª• s·∫°c g·∫ßn b·∫°n",
    description:
      "D·ªÖ d√†ng t√¨m ki·∫øm c√°c tr·ª• s·∫°c xe ƒëi·ªán g·∫ßn nh·∫•t v·ªõi v·ªã tr√≠ hi·ªán t·∫°i c·ªßa b·∫°n tr√™n b·∫£n ƒë·ªì",
  },
  {
    icon: "‚ö°",
    title: "Th√¥ng tin chi ti·∫øt tr·ª• s·∫°c",
    description:
      "Xem th√¥ng tin ƒë·∫ßy ƒë·ªß v·ªÅ lo·∫°i s·∫°c, c√¥ng su·∫•t, gi√° c·∫£ v√† t√¨nh tr·∫°ng ho·∫°t ƒë·ªông",
  },
  {
    icon: "üì±",
    title: "ƒê·∫∑t ch·ªó tr∆∞·ªõc",
    description:
      "ƒê·∫∑t tr∆∞·ªõc ch·ªó s·∫°c ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ s·∫µn khi b·∫°n ƒë·∫øn, ti·∫øt ki·ªám th·ªùi gian ch·ªù ƒë·ª£i",
  },
  {
    icon: "üí≥",
    title: "Thanh to√°n ti·ªán l·ª£i",
    description:
      "Thanh to√°n d·ªÖ d√†ng qua v√≠ ƒëi·ªán t·ª≠, th·∫ª ng√¢n h√†ng ho·∫∑c QR code ngay tr√™n ·ª©ng d·ª•ng",
  },
  {
    icon: "üìä",
    title: "Theo d√µi qu√° tr√¨nh s·∫°c",
    description:
      "Gi√°m s√°t th·ªùi gian s·∫°c, m·ª©c pin hi·ªán t·∫°i v√† chi ph√≠ trong th·ªùi gian th·ª±c",
  },
  {
    icon: "üîî",
    title: "Th√¥ng b√°o th√¥ng minh",
    description:
      "Nh·∫≠n th√¥ng b√°o khi s·∫°c ho√†n t·∫•t, c·∫£nh b√°o khi tr·ª• s·∫°c g·∫∑p s·ª± c·ªë",
  },
];

// ===== Helper Function =====
const getDistanceKm = (lat1, lon1, lat2, lon2) => {
  const R = 6371;
  const dLat = (lat2 - lat1) * (Math.PI / 180);
  const dLon = (lon2 - lon1) * (Math.PI / 180);
  const a =
    Math.sin(dLat / 2) ** 2 +
    Math.cos(lat1 * (Math.PI / 180)) *
    Math.cos(lat2 * (Math.PI / 180)) *
    Math.sin(dLon / 2) ** 2;
  return R * (2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)));
};

// ===== About Section =====
const About = () => {
  useEffect(() => {
    window.scrollTo(0, 0);
  }, []);

  return (
    <section className="homepage__about">
      <div className="section-header">
        <h2>V·ªÅ ch√∫ng t√¥i</h2>
        <p>H·ªá th·ªëng tr·∫°m s·∫°c xe ƒëi·ªán h√†ng ƒë·∫ßu Vi·ªát Nam</p>
      </div>
    </section>
  );
};

// ===== HomePage =====
const SAMPLE_TRANSACTION = {
  success: true,
  message: "OK",
  data: {
    vehicle: {
      owner: "68d9f66de455b8d4cf0c5b39",
      make: "VinFast",
      model: "VF8",
      year: 2022,
      color: "White",
      plateNumber: "51H-123.45",
      vin: "WVWAA71K08W201030",
      type: "car",
      batteryCapacityKwh: 82,
      connectorType: "DC",
      status: "active",
      createdAt: "2025-10-13T03:27:40.357Z",
      updatedAt: "2025-10-13T03:27:40.357Z",
      id: "68ec71acb40ef939ab19bc97",
    },
    items: [
      {
        slot: {
          port: "68f0633908aa255495796a00",
          order: 1,
          status: "available",
          nextAvailableAt: null,
          createdAt: "2025-10-20T02:40:10.877Z",
          updatedAt: "2025-10-20T02:40:10.877Z",
          id: "68f5a10a00b136b8c9dae65d",
        },
        startAt: "2025-10-01T10:00:00.000Z",
        endAt: "2025-10-01T11:00:00.000Z",
      },
    ],
    status: "pending",
    qrCheck: false,
    createdAt: "2025-10-20T02:55:31.929Z",
    updatedAt: "2025-10-20T02:55:31.929Z",
    id: "68f5a4a300b136b8c9dae88a",
  },
};

const HomePage = () => {
  const featuresRef = useRef(null);
  const stepsRef = useRef(null);
  const mapSectionRef = useRef(null);
  const navigate = useNavigate();

  const [selectedId, setSelectedId] = useState(null);
  const [mapStations, setMapStations] = useState([]);
  const [userLocation, setUserLocation] = useState(null);
  const [nearbyStations, setNearbyStations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  // const [transaction, setTransaction] = useState(null);
  // const [txLoading, setTxLoading] = useState(true);
  const itemRefs = useRef({});

  // // ===== X·ª≠ l√Ω VNPay return URL =====
  // useEffect(() => {
  //   const urlParams = new URLSearchParams(window.location.search);
  //   const vnpResponseCode = urlParams.get('vnp_ResponseCode');

  //   console.log('Checking VNPay return:', {
  //     vnpResponseCode,
  //     search: window.location.search,
  //     pathname: window.location.pathname,
  //     href: window.location.href
  //   });

  //   if (vnpResponseCode) {
  //     // C√≥ VNPay return parameters, redirect ƒë·∫øn paymentSuccessPage
  //     const queryString = window.location.search;

  //     // T·∫°o URL m·ªõi cho payment-success
  //     const newUrl = window.location.origin + '/payment-success' + queryString;

  //     console.log('Redirecting to:', newUrl);
  //     window.location.href = newUrl;
  //   }
  // }, []);

  // ===== Fetch Station Data from API =====
  useEffect(() => {
    let isMounted = true; // tr√°nh l·ªói khi unmount

    const fetchStations = async () => {
      try {
        setLoading(true);
        const res = await api.get("/stations");
        // console.log("Station API result:", res.data);

        // Tr∆∞·ªùng h·ª£p API tr·∫£ v·ªÅ m·∫£ng ho·∫∑c object
        let stationsData = [];
        if (Array.isArray(res.data)) {
          stationsData = res.data;
        } else if (Array.isArray(res.data.items)) {
          stationsData = res.data.items;
        } else if (res.data && typeof res.data === "object") {
          stationsData = [res.data];
        }

        // L·ªçc tr·∫°m c√≥ t·ªça ƒë·ªô h·ª£p l·ªá
        stationsData = stationsData.filter((s) => s.latitude && s.longitude);

        // Format l·∫°i d·ªØ li·ªáu
        const formatted = stationsData.map((s, index) => ({
          id: s.id || index + 1,
          name: s.name || "Tr·∫°m s·∫°c kh√¥ng t√™n",
          coords: [s.latitude, s.longitude],
          status: s.status === "active" ? "available" : "maintenance",
          address: s.address || "Kh√¥ng r√µ ƒë·ªãa ch·ªâ",
          speed: s.ports?.[0]?.speed || "N/A",
          price: s.ports?.[0]?.price
            ? `${s.ports[0].price.toLocaleString()} ƒë/kWh`
            : "N/A",
          slots: {
            ac: s.ports?.filter((p) => p.type === "AC").length || 0,
            dc: s.ports?.filter((p) => p.type === "DC").length || 0,
            ultra: s.ports?.filter((p) => p.type === "Ultra").length || 0,
          },
        }));

        if (isMounted) {
          setMapStations(formatted);
          console.log("‚úÖ C·∫≠p nh·∫≠t danh s√°ch tr·∫°m:", formatted);
        }
      } catch (err) {
        console.error("Error fetching stations:", err);
        if (isMounted) setError("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu tr·∫°m s·∫°c.");
      } finally {
        if (isMounted) setLoading(false);
      }
    };

    // G·ªçi l·∫ßn ƒë·∫ßu
    fetchStations();

    // üîÅ G·ªçi l·∫°i API m·ªói 30 gi√¢y ƒë·ªÉ c·∫≠p nh·∫≠t danh s√°ch tr·∫°m m·ªõi
    const interval = setInterval(fetchStations, 1000000);

    return () => {
      isMounted = false;
      clearInterval(interval);
    };
  }, []);

  // ===== Get User Location =====
  const updateLocation = () => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (pos) => {
          const { latitude, longitude } = pos.coords;
          const coords = [latitude, longitude];
          setUserLocation(coords);

          if (mapStations.length > 0) {
            const withDistance = mapStations.map((s) => ({
              ...s,
              distance: getDistanceKm(
                latitude,
                longitude,
                s.coords[0],
                s.coords[1]
              ),
            }));
            setNearbyStations(
              withDistance.sort((a, b) => a.distance - b.distance).slice(0, 5)
            );
          }
        },
        (err) => console.error("Kh√¥ng l·∫•y ƒë∆∞·ª£c v·ªã tr√≠:", err),
        { enableHighAccuracy: true }
      );
    }
  };

  useEffect(() => {
    if (mapStations.length > 0) updateLocation();
  }, [mapStations]);

  const handleMarkerClick = (id) => setSelectedId(id);

  const handleBooking = (stationId) => {
    const token = localStorage.getItem("token");
    const redirectUrl = `/booking/${stationId}`;
    if (!token) {
      navigate(`/login?redirect=${encodeURIComponent(redirectUrl)}`);
    } else {
      navigate(redirectUrl);
    }
  };

  // // fetch latest transaction
  // useEffect(() => {
  //   let mounted = true;
  //   const fetchLatestTransaction = async () => {
  //     try {
  //       setTxLoading(true);
  //       const res = await api.get("/transactions/latest");
  //       const payload = res?.data?.data ?? res?.data ?? null;
  //       if (mounted) {
  //         setTransaction(payload ?? SAMPLE_TRANSACTION.data);
  //       }
  //     } catch (err) {
  //       console.error("Error fetching transaction:", err);
  //       if (mounted) setTransaction(SAMPLE_TRANSACTION.data);
  //     } finally {
  //       if (mounted) setTxLoading(false);
  //     }
  //   };

  //   fetchLatestTransaction();

  //   return () => {
  //     mounted = false;
  //   };
  // }, []);

  // ===== Render =====
  if (loading) {
    return (
      <div className="homepage__loading">
        <p>ƒêang t·∫£i d·ªØ li·ªáu tr·∫°m s·∫°c...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="homepage__error">
        <p>{error}</p>
      </div>
    );
  }

  return (
    <div className="homepage">
      {/* move all page sections below a content wrapper so they are shifted under the header */}
      <div
        className="homepage__content"
        style={{ paddingTop: 80 }} // adjust 80 to match your header height
      >
        {/* ===== Hero Section ===== */}
        <section className="homepage__hero">
          <div className="homepage__hero-content">
            <h1>T√¨m tr·∫°m s·∫°c xe ƒëi·ªán d·ªÖ d√†ng, s·∫°c nhanh ch√≥ng</h1>
            <p>
              ·ª®ng d·ª•ng t√¨m ki·∫øm v√† s·ª≠ d·ª•ng tr·ª• s·∫°c xe ƒëi·ªán h√†ng ƒë·∫ßu Vi·ªát Nam.
              H∆°n 500 tr·∫°m s·∫°c tr√™n to√†n qu·ªëc, ƒë·∫∑t ch·ªó tr∆∞·ªõc, thanh to√°n ti·ªán
              l·ª£i.
            </p>
            <div className="homepage__hero-actions">
              <button
                className="btn btn--primary"
                onClick={() => {
                  if (mapSectionRef.current) {
                    const topPos =
                      mapSectionRef.current.getBoundingClientRect().top +
                      window.scrollY;
                    window.scrollTo({ top: topPos, behavior: "smooth" });
                  }
                }}
              >
                T√¨m tr·∫°m s·∫°c ngay
              </button>
            </div>
          </div>
          <div className="homepage__hero-image">
            <div className="hero-visual">
              <div className="center-logo">
                <img
                  src="/src/assets/logo.jpg"
                  alt="Logo"
                  className="hero-logo"
                />
              </div>
              <div className="charging-station">üöó</div>
              <div className="dashboard">‚ö°</div>
              <div className="mobile-app">üì±</div>
            </div>
          </div>
        </section>

        {/* ===== Map + Station List ===== */}
        <section className="homepage__map" ref={mapSectionRef}>
          <div className="section-header">
            <h2>B·∫£n ƒë·ªì tr·∫°m s·∫°c</h2>
            <p>T√¨m ki·∫øm v√† xem th√¥ng tin chi ti·∫øt c√°c tr·ª• s·∫°c g·∫ßn b·∫°n</p>
          </div>
          <div className="map-container">
            <div className="station-list">
              <h3>Tr·∫°m s·∫°c g·∫ßn b·∫°n</h3>
              <div className="station-scroll">
                {nearbyStations.map((station) => (
                  <div
                    key={station.id}
                    ref={(el) => (itemRefs.current[station.id] = el)}
                    className={`station-item ${selectedId === station.id ? "is-selected" : ""
                      }`}
                    onClick={() => setSelectedId(station.id)}
                  >
                    <div className="station-header">
                      <h4>{station.name}</h4>
                      {station.distance && (
                        <span className="distance">
                          {station.distance.toFixed(1)} km
                        </span>
                      )}
                      <div className={`status-indicator ${station.status}`}>
                        {station.status === "available" && "üü¢"}
                        {station.status === "busy" && "üü°"}
                        {station.status === "maintenance" && "üî¥"}
                      </div>
                    </div>
                    <div className="station-details">
                      <div className="item">‚ö° {station.speed}</div>
                      <div className="item">üí∞ {station.price}</div>
                      <div className="item">
                        üîå AC: {station.slots.ac} | DC: {station.slots.dc} |
                        Ultra: {station.slots.ultra}
                      </div>
                      <div className="item">üìç {station.address}</div>
                    </div>
                    <div className="station-actions">
                      <button
                        className="btn-small btn-primary"
                        onClick={() => handleBooking(station.id)}
                      >
                        ƒê·∫∑t ch·ªó
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div className="map-view">
              <ChargingMap
                stations={mapStations}
                center={userLocation}
                zoom={12}
                onSelect={(station) => handleMarkerClick(station.id)}
                selectedStation={
                  selectedId
                    ? mapStations.find((s) => s.id === selectedId)
                    : null
                }
                userLocation={userLocation}
                onUpdateLocation={updateLocation}
              />
            </div>
          </div>
        </section>

        {/* ===== Recent transaction (new) =====
        <section className="homepage__transaction" aria-live="polite">
          <div className="section-header">
            <h2>Giao d·ªãch m·ªõi nh·∫•t</h2>
          </div>

          {txLoading ? (
            <div className="tx-loading">ƒêang t·∫£i giao d·ªãch...</div>
          ) : transaction ? (
            <div className="tx-card">
              <div className="tx-row">
                <div className="tx-label">Booking ID</div>
                <div className="tx-value">{transaction.id}</div>
              </div>

              <div className="tx-row">
                <div className="tx-label">Tr·∫°ng th√°i</div>
                <div className="tx-value">{transaction.status}</div>
              </div>

              <div className="tx-divider" />

              <h4>Th√¥ng tin xe</h4>
              <div className="tx-row">
                <div className="tx-label">Bi·ªÉn s·ªë</div>
                <div className="tx-value">{transaction.vehicle?.plateNumber}</div>
              </div>
              <div className="tx-row">
                <div className="tx-label">Xe</div>
                <div className="tx-value">
                  {transaction.vehicle?.make} {transaction.vehicle?.model} ({transaction.vehicle?.year})
                </div>
              </div>

              <div className="tx-divider" />

              <h4>Slot & Th·ªùi gian</h4>
              {transaction.items && transaction.items.length > 0 ? (
                <>
                  <div className="tx-row">
                    <div className="tx-label">C·ªïng (port)</div>
                    <div className="tx-value">{transaction.items[0].slot?.port}</div>
                  </div>
                  <div className="tx-row">
                    <div className="tx-label">Th·ª© t·ª±</div>
                    <div className="tx-value">{transaction.items[0].slot?.order}</div>
                  </div>
                  <div className="tx-row">
                    <div className="tx-label">Tr·∫°ng th√°i slot</div>
                    <div className="tx-value">{transaction.items[0].slot?.status}</div>
                  </div>
                  <div className="tx-row">
                    <div className="tx-label">B·∫Øt ƒë·∫ßu</div>
                    <div className="tx-value">
                      {transaction.items[0].startAt ? new Date(transaction.items[0].startAt).toLocaleString() : "-"}
                    </div>
                  </div>
                  <div className="tx-row">
                    <div className="tx-label">K·∫øt th√∫c</div>
                    <div className="tx-value">
                      {transaction.items[0].endAt ? new Date(transaction.items[0].endAt).toLocaleString() : "-"}
                    </div>
                  </div>
                </>
              ) : (
                <div>Kh√¥ng c√≥ th√¥ng tin slot</div>
              )}

              <div className="tx-divider" />
              <div className="tx-row">
                <div className="tx-label">QR Check</div>
                <div className="tx-value">{String(transaction.qrCheck)}</div>
              </div>
              <div className="tx-row">
                <div className="tx-label">T·∫°o l√∫c</div>
                <div className="tx-value">{transaction.createdAt ? new Date(transaction.createdAt).toLocaleString() : "-"}</div>
              </div>
            </div>
          ) : (
            <div>Kh√¥ng c√≥ giao d·ªãch n√†o.</div>
          )}
        </section> */}

        {/* Features Section */}
        <section className="homepage__features" ref={featuresRef}>
          <div className="section-header">
            <h2>T√≠nh nƒÉng n·ªïi b·∫≠t</h2>
            <p>Nh·ªØng t√≠nh nƒÉng gi√∫p b·∫°n s·∫°c xe ƒëi·ªán thu·∫≠n ti·ªán v√† ti·∫øt ki·ªám</p>
          </div>
          <div className="features-grid">
            {features.map((feature, idx) => (
              <div key={idx} className="feature-card">
                <div className="feature-icon">{feature.icon}</div>
                <h3>{feature.title}</h3>
                <p>{feature.description}</p>
              </div>
            ))}
          </div>
        </section>

        {/* How to use Section */}
        <section className="homepage__howto" ref={stepsRef}>
          <div className="section-header">
            <h2>C√°ch s·ª≠ d·ª•ng ƒë∆°n gi·∫£n</h2>
            <p>Ch·ªâ v·ªõi 4 b∆∞·ªõc ƒë∆°n gi·∫£n ƒë·ªÉ s·∫°c xe ƒëi·ªán</p>
          </div>
          <div className="steps-grid">
            <div className="step-item">
              <div className="step-number">1</div>
              <h3>T√¨m tr·∫°m s·∫°c</h3>
              <p>S·ª≠ d·ª•ng b·∫£n ƒë·ªì ƒë·ªÉ t√¨m tr·∫°m s·∫°c g·∫ßn nh·∫•t</p>
            </div>
            <div className="step-item">
              <div className="step-number">2</div>
              <h3>ƒê·∫∑t ch·ªó</h3>
              <p>ƒê·∫∑t tr∆∞·ªõc ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ ch·ªó s·∫°c khi ƒë·∫øn</p>
            </div>
            <div className="step-item">
              <div className="step-number">3</div>
              <h3>Thanh to√°n</h3>
              <p>Thanh to√°n b·∫±ng nhi·ªÅu ph∆∞∆°ng th·ª©c</p>
            </div>
            <div className="step-item">
              <div className="step-number">4</div>
              <h3>K·∫øt n·ªëi v√† s·∫°c</h3>
              <p>C·∫Øm s·∫°c v√† theo d√µi qu√° tr√¨nh tr√™n ·ª©ng d·ª•ng</p>
            </div>
          </div>
        </section>

        {/* CTA Section */}
        <section className="homepage__cta">
          <h2>B·∫Øt ƒë·∫ßu h√†nh tr√¨nh xe ƒëi·ªán </h2>
        </section>

        {/* About Section */}
        <About />

      </div>

    </div>
  );
};
export default HomePage;
