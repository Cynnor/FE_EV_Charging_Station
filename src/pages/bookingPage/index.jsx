import { useState, useEffect, useMemo } from "react";
import { useNavigate, useSearchParams, useParams } from "react-router-dom";
import "./index.scss";
import ChargingMap from "../../components/chargingMap";
// Removed unused import
import api from "../../config/api";

/** ============== MAPPERS & TYPES (JS) ============== */
// Danh s√°ch qu·∫≠n c·ªë ƒë·ªãnh theo y√™u c·∫ßu (ƒë√£ lo·∫°i b·ªè tr√πng l·∫∑p)
const FIXED_DISTRICTS = [
  "Qu·∫≠n 1",
  "Qu·∫≠n 2",
  "Qu·∫≠n 3",
  "Qu·∫≠n 4",
  "Qu·∫≠n 5",
  "Qu·∫≠n 6",
  "Qu·∫≠n 7",
  "Qu·∫≠n 8",
  "Qu·∫≠n 9",
  "Qu·∫≠n 10",
  "Qu·∫≠n 11",
  "Qu·∫≠n 12",
  "Qu·∫≠n B√¨nh T√¢n",
  "Qu·∫≠n B√¨nh Th·∫°nh",
  "Qu·∫≠n G√≤ V·∫•p",
  "Qu·∫≠n Ph√∫ Nhu·∫≠n",
  "Qu·∫≠n T√¢n B√¨nh",
  "Qu·∫≠n T√¢n Ph√∫",
];

// Chuy·ªÉn danh s√°ch c·ªïng s·∫°c (ports) ‚Üí ki·ªÉu tr·∫°m hi·ªÉn th·ªã
function chooseStationType(ports = []) {
  if (!ports.length) return "AC";
  const maxPower = Math.max(...ports.map((p) => p?.powerKw || 0), 0);
  const hasDC = ports.some((p) => p?.type === "DC");
  if (hasDC && maxPower >= 120) return "DC ULTRA";
  if (hasDC) return "DC";
  return "AC";
}
function toPriceVND(num) {
  if (!num && num !== 0) return "-";
  try {
    return `${Number(num).toLocaleString("vi-VN")} ƒë/kWh`;
  } catch {
    return `${num} ƒë/kWh`;
  }
}

// Tr√≠ch xu·∫•t t√™n qu·∫≠n t·ª´ ƒë·ªãa ch·ªâ ƒë·ªÉ ph·ª•c v·ª• filter (b·ªã x√≥a tr∆∞·ªõc ƒë√≥)
function extractDistrictFromAddress(address) {
  if (!address || typeof address !== "string") return null;
  const raw = address.trim();

  // C√°c pattern ph·ªï bi·∫øn: "Qu·∫≠n 1", "Q1", "Q. 1", "District 1"
  const patterns = [
    { re: /qu·∫≠n\s*(\d{1,2})\b/i, format: (m) => `Qu·∫≠n ${m[1]}` },
    { re: /\bq\.?\s*(\d{1,2})\b/i, format: (m) => `Qu·∫≠n ${m[1]}` },
    { re: /district\s*(\d{1,2})\b/i, format: (m) => `Qu·∫≠n ${m[1]}` },
    // V√≠ d·ª•: "Huy·ªán C·ªß Chi", "Huy·ªán Nh√† B√®"
    {
      re: /huy·ªán\s*([^,\-\n]+)\b/i,
      format: (m) => `Huy·ªán ${m[1].trim().replace(/\s+/g, " ")}`,
    },
    // V√≠ d·ª•: "TP Th·ªß ƒê·ª©c", "Th√†nh ph·ªë Th·ªß ƒê·ª©c" ‚Üí chu·∫©n ho√° v·ªÅ "TP Th·ªß ƒê·ª©c"
    { re: /(tp\.?|th√†nh ph·ªë)\s*th·ªß\s*ƒë·ª©c\b/i, format: () => "TP Th·ªß ƒê·ª©c" },
  ];

  for (const p of patterns) {
    const m = raw.match(p.re);
    if (m) return p.format(m);
  }

  // Tr∆∞·ªùng h·ª£p "Qu·∫≠n" t√™n ch·ªØ: "Qu·∫≠n B√¨nh Th·∫°nh" (l·∫•y ƒë·∫øn d·∫•u ph·∫©y)
  const namedDistrict = raw.match(/qu·∫≠n\s*([^,\-\n]+)\b/i);
  if (namedDistrict) {
    const name = namedDistrict[1].trim().replace(/\s+/g, " ");
    return `Qu·∫≠n ${name}`;
  }

  return null;
}

// ‚úÖ Th√™m h√†m t√≠nh kho·∫£ng c√°ch ·ªü ƒë√¢y
const getDistanceKm = (lat1, lon1, lat2, lon2) => {
  const R = 6371;
  const dLat = (lat2 - lat1) * (Math.PI / 180);
  const dLon = (lon2 - lon1) * (Math.PI / 180);
  const a =
    Math.sin(dLat / 2) ** 2 +
    Math.cos(lat1 * (Math.PI / 180)) *
    Math.cos(lat2 * (Math.PI / 180)) *
    Math.sin(dLon / 2) ** 2;
  return R * (2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)));
};
/** Map 1 item API -> 1 station cho UI map/list.
 *  L∆∞u th√™m rawPorts ƒë·ªÉ b∆∞·ªõc 2 d√πng l√†m "chargers".
 */
function mapApiStation(s) {
  const total = s?.ports?.length || 0;
  const available =
    s?.ports?.filter((p) => p?.status === "available").length || 0;
  const maxPower = total ? Math.max(...s.ports.map((p) => p?.powerKw || 0)) : 0;
  const minPrice = total ? Math.min(...s.ports.map((p) => p?.price || 0)) : 0;

  return {
    id: s.id,
    name: s.name,
    address: s.address,
    coords: [s.latitude, s.longitude], // API tr·∫£ longitude/latitude ‚Üí ƒë·ªïi v·ªÅ [lat, lng]
    type: chooseStationType(s.ports || []), // "AC" | "DC" | "DC ULTRA"
    speed: maxPower ? `${maxPower} kW` : "-",
    price: minPrice ? toPriceVND(minPrice) : "-",
    available,
    total,
    distance: "", // c√≥ th·ªÉ t√≠nh theo v·ªã tr√≠ user n·∫øu c·∫ßn
    rating: undefined,
    rawPorts: s.ports || [], // gi·ªØ l·∫°i ƒë·ªÉ v·∫Ω chargers ·ªü Step 2
    status: s.status || "active", // "active" | "inactive" | "maintenance"
  };
}

/** Map port -> charger card */
function mapPortToCharger(port, idx, baseLatLng) {
  // üëá Ki·ªÉm tra port c√≥ h·ª£p l·ªá kh√¥ng
  if (!port || typeof port !== "object") {
    console.warn("‚ö†Ô∏è Port kh√¥ng h·ª£p l·ªá:", port);
    return null; // ho·∫∑c throw error
  }
  const connector = port.type === "DC" ? "CCS2" : "Type 2";
  // T·∫°o to·∫° ƒë·ªô l·ªách nh·∫π ƒë·ªÉ render nhi·ªÅu marker (n·∫øu map c·∫ßn)
  const delta = 0.00012;
  const coords = [
    (baseLatLng?.[0] || 0) +
    (idx % 3 === 0 ? delta : idx % 3 === 1 ? -delta : 0),
    (baseLatLng?.[1] || 0) + (idx % 2 === 0 ? delta : -delta),
  ];

  // üëá Chuy·ªÉn speed t·ª´ API th√†nh nh√£n ƒë·∫πp
  const speedLabels = {
    slow: "Slow",
    fast: "Fast",
    super_fast: "Super Fast",
    // th√™m n·∫øu c·∫ßn
  };

  const typeLabels = {
    AC: "AC",
    DC: port.powerKw >= 120 ? "Ultra" : "DC", // ho·∫∑c n·∫øu API c√≥ s·∫µn "Ultra", th√¨ d√πng port.type lu√¥n
  };
  return {
    id: port.id, // LU√îN l·∫•y id th·ª±c t·∫ø t·ª´ API
    name: `Tr·ª• ${idx + 1}`,
    coords,
    power: `${port.powerKw ?? "-"} kW`,
    price: toPriceVND(port.price),
    status: port.status || "available",
    connector,
    // üëá D√πng tr·ª±c ti·∫øp t·ª´ API + map sang nh√£n ƒë·∫πp
    typeLabel: typeLabels[port.type] || port.type,
    speedLabel: speedLabels[port.speed] || "Unknown",
  };
}

/** =================== COMPONENT =================== */
export default function BookingPage() {
  const [vehicleId, setVehicleId] = useState("");
  const [vehicles, setVehicles] = useState([]);
  const [selectedVehicle, setSelectedVehicle] = useState(null);
  const [showVehicleModal, setShowVehicleModal] = useState(false);
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const { stationId } = useParams();

  const today = new Date();
  const defaultDate = today.toISOString().split("T")[0];
  const defaultTime = today.toTimeString().slice(0, 5);
  const minDate = defaultDate;
  const maxDate = new Date(today.getTime() + 2 * 24 * 60 * 60 * 1000)
    .toISOString()
    .split("T")[0];

  const [step, setStep] = useState(1);
  const [stations, setStations] = useState([]); // d·ªØ li·ªáu th·∫≠t
  const [districts, setDistricts] = useState(FIXED_DISTRICTS); // danh s√°ch qu·∫≠n c·ªë ƒë·ªãnh
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const [selectedStation, setSelectedStation] = useState(null);
  const [selectedCharger, setSelectedCharger] = useState(null);


  // Step 3: slots
  const [slots, setSlots] = useState([]);
  const [slotsLoading, setSlotsLoading] = useState(false);
  const [slotsError, setSlotsError] = useState(null);
  const [selectedSlot, setSelectedSlot] = useState(null);

  const [searchTerm, setSearchTerm] = useState("");
  const [filterType, setFilterType] = useState("all"); // gi·ªØ state nh∆∞ng kh√¥ng √°p d·ª•ng l·ªçc lo·∫°i tr·∫°m
  const [districtFilter, setDistrictFilter] = useState("all"); // "all" | <districtName>

  const [userLocation, setUserLocation] = useState(null);
  useEffect(() => {
    window.scrollTo(0, 0);
  }, []);

  // L·∫•y filter t·ª´ URL (?type=AC|DC|DC_ULTRA)
  useEffect(() => {
    const typeFromUrl = searchParams.get("type");
    if (typeFromUrl) {
      const normalized = typeFromUrl === "DC_ULTRA" ? "DC ULTRA" : typeFromUrl;
      if (["AC", "DC", "DC ULTRA"].includes(normalized))
        setFilterType(normalized);
    }
  }, [searchParams]);

  // G·ªçi API /stations
  useEffect(() => {
    let cancelled = false;
    async function load() {
      try {
        setLoading(true);
        setError(null);
        const { data } = await api.get("/stations", {
          params: {
            page: 1,
            limit: 120,
            includePorts: true,
            // name: searchTerm || undefined, // b·∫≠t n·∫øu mu·ªën filter server-side
          },
        });
        if (cancelled) return;
        const mapped = (data?.items || []).map(mapApiStation);
        setStations(mapped);
        // Hi·ªÉn th·ªã danh s√°ch qu·∫≠n c·ªë ƒë·ªãnh
        setDistricts(FIXED_DISTRICTS);

        // N·∫øu c√≥ stationId t·ª´ URL, t·ª± ƒë·ªông ch·ªçn tr·∫°m v√† chuy·ªÉn sang Step 2
        if (stationId && !cancelled) {
          const found = mapped.find((s) => String(s.id) === String(stationId));
          if (found) {
            setSelectedStation(found);
            setStep(2);
          }
        }
        // N·∫øu ch∆∞a c√≥ center ch·ªçn, b·∫°n c√≥ th·ªÉ ch·ªçn tr·∫°m ƒë·∫ßu ti√™n
        // if (!selectedStation && mapped[0]) setSelectedStation(mapped[0]);
      } catch (e) {
        if (!cancelled) setError(e?.message || "Kh√¥ng th·ªÉ t·∫£i danh s√°ch tr·∫°m");
      } finally {
        if (!cancelled) setLoading(false);
      }
    }
    load();
    return () => {
      cancelled = true;
    };
  }, []); // ch·ªâ load 1 l·∫ßn. N·∫øu mu·ªën search theo t·ª´ kho√°, th√™m [searchTerm]

  useEffect(() => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (pos) => {
          const { latitude, longitude } = pos.coords;
          setUserLocation([latitude, longitude]);
        },
        (err) => {
          console.warn("Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠ ng∆∞·ªùi d√πng:", err);
          // Kh√¥ng c·∫ßn setError v√¨ kh√¥ng ph·∫£i l·ªói nghi√™m tr·ªçng
        },
        { enableHighAccuracy: true, timeout: 10000 }
      );
    }
  }, []);

  const defaultCenter = [10.850268581807446, 106.76508926692969];

  // // L·ªçc client-side theo √¥ t√¨m ki·∫øm v√† filterType
  // const filteredStations = useMemo(() => {
  //   return stations.filter((station) => {
  //     const matchesSearch =
  //       !searchTerm ||
  //       station.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
  //       station.address.toLowerCase().includes(searchTerm.toLowerCase());

  //     const matchesType = filterType === "all" ? true : station.type === filterType;
  //     return matchesSearch && matchesType;
  //   });
  // }, [stations, searchTerm, filterType]);
  // ‚úÖ T√≠nh kho·∫£ng c√°ch t·ª´ v·ªã tr√≠ ng∆∞·ªùi d√πng ƒë·∫øn t·ª´ng tr·∫°m
  const stationsWithDistance = useMemo(() => {
    if (!userLocation || !stations.length) {
      return stations.map((s) => ({ ...s, distance: "" }));
    }
    const [lat, lon] = userLocation;
    return stations.map((station) => {
      const dist = getDistanceKm(
        lat,
        lon,
        station.coords[0],
        station.coords[1]
      );
      return {
        ...station,
        distance: `${dist.toFixed(1)} km`,
      };
    });
  }, [stations, userLocation]);

  // L·ªçc client-side theo √¥ t√¨m ki·∫øm v√† filterType (d·ª±a tr√™n tr·∫°m ƒë√£ c√≥ kho·∫£ng c√°ch)
  const filteredStations = useMemo(() => {
    // 1. L·ªçc: ch·ªâ gi·ªØ tr·∫°m c√≥ √≠t nh·∫•t 1 c·ªïng "available"
    const filtered = stationsWithDistance.filter((station) => {
      const isValidStatus =
        station.status === "active" || station.status === "maintenance";
      if (!isValidStatus) return false;

      // 2. Ti·∫øp t·ª•c l·ªçc theo t√¨m ki·∫øm v√† lo·∫°i tr·∫°m
      const matchesSearch =
        !searchTerm ||
        (station.name &&
          station.name.toLowerCase().includes(searchTerm.toLowerCase())) ||
        (station.address &&
          station.address.toLowerCase().includes(searchTerm.toLowerCase()));

      // L·ªçc theo lo·∫°i tr·∫°m n·∫øu c√≥ filterType t·ª´ URL
      const matchesType =
        filterType === "all" ? true : station.type === filterType;

      // 3. L·ªçc theo qu·∫≠n
      // So kh·ªõp theo vƒÉn b·∫£n ƒë·ªãa ch·ªâ ch·ª©a t√™n qu·∫≠n ƒë∆∞·ª£c ch·ªçn (kh√¥ng ph√¢n bi·ªát hoa/th∆∞·ªùng)
      const matchesDistrict =
        districtFilter === "all"
          ? true
          : (station.address || "")
            .toLowerCase()
            .includes(districtFilter.toLowerCase());

      return matchesSearch && matchesType && matchesDistrict;
    });

    // 3. S·∫Øp x·∫øp theo kho·∫£ng c√°ch (g·∫ßn nh·∫•t l√™n ƒë·∫ßu) n·∫øu c√≥ v·ªã tr√≠ ng∆∞·ªùi d√πng
    if (userLocation) {
      return filtered.sort((a, b) => {
        const distA = a.distance
          ? Number.parseFloat(a.distance)
          : Number.POSITIVE_INFINITY;
        const distB = b.distance
          ? Number.parseFloat(b.distance)
          : Number.POSITIVE_INFINITY;
        return distA - distB;
      });
    }

    return filtered;
  }, [
    stationsWithDistance,
    searchTerm,
    filterType,
    districtFilter,
    userLocation,
  ]);

  // Chargers sinh t·ª´ ports c·ªßa tr·∫°m ƒë√£ ch·ªçn
  const chargers = useMemo(() => {
    if (!selectedStation?.rawPorts?.length) return [];
    // Ch·ªâ hi·ªÉn th·ªã available v√† in_use (bao g·ªìm occupied ‚Üí chu·∫©n ho√° th√†nh in_use)
    return selectedStation.rawPorts
      .filter(
        (p) =>
          p?.status === "available" ||
          p?.status === "in_use" ||
          p?.status === "occupied"
      )
      .map((p) => {
        const normalized = { ...p };
        if (normalized.status === "occupied") normalized.status = "in_use";
        return normalized;
      })
      .map((p, idx) => mapPortToCharger(p, idx, selectedStation.coords));
  }, [selectedStation]);

  const [formData, setFormData] = useState({
    date: defaultDate,
    startTime: defaultTime,
    endTime: "",
  });


  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };


  const handleSubmit = (e) => {
    e.preventDefault();

    if (!selectedStation || !selectedCharger || !selectedSlot) {
      alert("‚ö†Ô∏è Vui l√≤ng ch·ªçn tr·∫°m, tr·ª• v√† slot!");
      return;
    }

    if (!vehicleId) {
      alert("‚ùå Kh√¥ng t√¨m th·∫•y xe c·ªßa b·∫°n. Vui l√≤ng ki·ªÉm tra l·∫°i profile!");
      return;
    }

    const toUtcIso = (dateStr, timeStr) => {
      // dateStr: "YYYY-MM-DD", timeStr: "HH:mm" (local)
      const [h, m] = timeStr.split(":").map(Number);
      const dt = new Date(dateStr);
      dt.setHours(h, m, 0, 0); // local time
      return dt.toISOString(); // convert ‚Üí UTC "Z"
    };
    const startAtIso = toUtcIso(formData.date, formData.startTime);
    const endAtIso = toUtcIso(formData.date, formData.endTime);

    const payload = {
      vehicleId,
      items: [
        {
          slotId: selectedSlot.id,
          startAt: startAtIso,
          endAt: endAtIso,
        },
      ],
      status: "pending",
    };

    console.log("üöÄ G·ª≠i reservation payload:", payload);

    api
      .post("/reservations", payload)
      .then((res) => {
        // üëá L·∫•y d·ªØ li·ªáu reservation t·ª´ response
        const reservationData = res.data.data || res.data;
        const reservationId = reservationData?.id;

        if (reservationId) {
          console.log("‚úÖ Reservation ID:", reservationId);

          // üëá L·∫•y th√¥ng tin vehicle t·ª´ API ho·∫∑c state
          let vehicleInfo = null;

          // N·∫øu c√≥ selectedVehicle t·ª´ state (ƒë√£ ƒë∆∞·ª£c set khi ch·ªçn xe)
          if (selectedVehicle) {
            vehicleInfo = selectedVehicle;
          } else {
            // Fallback: Fetch t·ª´ API n·∫øu c·∫ßn
            vehicleInfo = {
              id: vehicleId,
              plateNumber: "N/A",
              make: "N/A",
              model: "N/A"
            };
          }

          // üëá Chuy·ªÉn ƒë·∫øn trang BookingSuccess v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
          navigate("/booking-success", {
            state: {
              reservation: reservationData,
              station: selectedStation,
              charger: selectedCharger,
              vehicle: vehicleInfo,
              bookingTime: {
                date: formData.date,
                startTime: formData.startTime,
                endTime: formData.endTime
              }
            },
            replace: true
          });
        } else {
          console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y reservationId trong response");
          alert("ƒê·∫∑t ch·ªó th√†nh c√¥ng nh∆∞ng kh√¥ng nh·∫≠n ƒë∆∞·ª£c ID.");
          navigate("/", { replace: true });
        }
      })
      .catch((err) => {
        console.error("‚ùå L·ªói khi t·∫°o reservation:", err);
        if (err.response?.status === 409) {
          const errorMsg =
            err.response.data?.message ||
            "Slot n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t b·ªüi ng∆∞·ªùi d√πng kh√°c.";
          console.log("‚ö†Ô∏è ƒê·∫∑t ch·ªó th·∫•t b·∫°i:", errorMsg);

          alert(
            `‚ùå ƒê·∫∑t ch·ªó th·∫•t b·∫°i: Slot n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t\n\nVui l√≤ng ch·ªçn l·∫°i slot kh√°c.`
          );
          setStep(3);
          // T·ª± ƒë·ªông reload l·∫°i slot m·ªõi nh·∫•t
          if (selectedCharger && selectedCharger.id) {
            const url = `/stations/ports/${encodeURIComponent(
              selectedCharger.id
            )}/slots`;
            api
              .get(url)
              .then(({ data }) => {
                setSlots(data?.items || []);
              })
              .catch(() => setSlots([]));
          }
        } else {
          const errorMsg =
            err.response?.data?.message || err.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh";
          alert(`‚ùå ƒê·∫∑t ch·ªó th·∫•t b·∫°i: ${errorMsg}`);
        }
      });
  };
  // L·∫•y id xe khi v√†o trang booking
  useEffect(() => {
    api
      .get("/vehicles")
      .then((res) => {
        // ∆Øu ti√™n l·∫•y id xe ƒë·∫ßu ti√™n
        const id =
          Array.isArray(res.data.items) && res.data.items.length > 0
            ? res.data.items[0].id
            : "";
        setVehicleId(id);
      })
      .catch(() => setVehicleId(""));
  }, []);

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    const days = [
      "Ch·ªß nh·∫≠t",
      "Th·ª© hai",
      "Th·ª© ba",
      "Th·ª© t∆∞",
      "Th·ª© nƒÉm",
      "Th·ª© s√°u",
      "Th·ª© b·∫£y",
    ];
    const dayName = days[date.getDay()];
    const day = date.getDate().toString().padStart(2, "0");
    const month = (date.getMonth() + 1).toString().padStart(2, "0");
    const year = date.getFullYear();
    return `${dayName}, ${day}/${month}/${year}`;
  };

  const [showDateModal, setShowDateModal] = useState(false);
  const [showTimeModal, setShowTimeModal] = useState(false);
  const [showEndTimeModal, setShowEndTimeModal] = useState(false);

  // T·∫°o 3 ng√†y l·ª±a ch·ªçn: h√¥m nay + 2 ng√†y ti·∫øp theo
  const dateOptions = useMemo(() => {
    const options = [];
    for (let i = 0; i < 3; i++) {
      const d = new Date(today.getTime() + i * 24 * 60 * 60 * 1000);
      const iso = d.toISOString().split("T")[0];
      options.push({
        iso,
        label: formatDate(iso),
      });
    }
    return options;
  }, [today]);

  // Sinh c√°c slot gi·ªù theo b∆∞·ªõc 30 ph√∫t, kh√¥ng cho ch·ªçn qu√° kh·ª©
  const timeSlots = useMemo(() => {
    const slots = [];
    const selectedDateIso = formData.date;
    const now = new Date();
    const isToday = selectedDateIso === today.toISOString().split("T")[0];

    let startHour = 0;
    let startMinute = 0;
    if (isToday) {
      // L√†m tr√≤n l√™n quarter-hour ti·∫øp theo
      const curH = now.getHours();
      const curM = now.getMinutes();
      const nextQuarter = Math.ceil((curM + 1) / 15) * 15; // v√≠ d·ª• 1:54 -> 2:00
      if (nextQuarter >= 60) {
        startHour = (curH + 1) % 24;
        startMinute = 0;
      } else {
        startHour = curH;
        startMinute = nextQuarter;
      }
    }

    for (let h = startHour; h < 24; h++) {
      for (let m = h === startHour ? startMinute : 0; m < 60; m += 15) {
        const hh = String(h).padStart(2, "0");
        const mm = String(m).padStart(2, "0");
        slots.push(`${hh}:${mm}`);
      }
    }
    return slots;
  }, [formData.date, today]);

  const priceEstimate1h = useMemo(() => {
    if (!selectedCharger?.power || !selectedCharger?.price) return "-";
    const powerKw =
      Number(String(selectedCharger.power).replace(/[^\d.]/g, "")) || 0;
    const priceVnd =
      Number(String(selectedCharger.price).replace(/[^\d]/g, "")) || 0;
    if (!powerKw || !priceVnd) return "-";
    // ∆∞·ªõc t√≠nh = kW * ƒë/kWh * 1h
    return `${(powerKw * priceVnd).toLocaleString("vi-VN")} ƒë`;
  }, [selectedCharger]);

  // T·∫°o 3 m·ªëc gi·ªù k·∫øt th√∫c: +30m, +60m, +90m t·ª´ gi·ªù b·∫Øt ƒë·∫ßu (kh√¥ng v∆∞·ª£t qu√° ng√†y)
  const endTimeSlots = useMemo(() => {
    const base = formData.startTime;
    if (!base) return [];
    const [h, m] = base.split(":").map((n) => Number(n));
    const mins = h * 60 + m;
    const candidates = [30, 60, 90, 120, 150, 180, 210, 240].map(
      (delta) => mins + delta
    );
    return candidates
      .filter((total) => total < 24 * 60)
      .map((total) => {
        const hh = String(Math.floor(total / 60)).padStart(2, "0");
        const mm = String(total % 60).padStart(2, "0");
        return `${hh}:${mm}`;
      });
  }, [formData.startTime]);

  // ƒê·∫£m b·∫£o endTime h·ª£p l·ªá khi ƒë·ªïi startTime
  useEffect(() => {
    if (!endTimeSlots.length) {
      setFormData((prev) => ({ ...prev, endTime: "" }));
      return;
    }
    setFormData((prev) => ({ ...prev, endTime: endTimeSlots[0] }));
  }, [endTimeSlots]);

  // Fetch slots when entering step 3
  useEffect(() => {
    async function fetchSlots() {
      console.log("üöÄ Step:", step);
      console.log("üöÄ selectedCharger:", selectedCharger); // üëà Log xem c√≥ d·ªØ li·ªáu kh√¥ng
      console.log("üöÄ selectedCharger.id:", selectedCharger?.id); // üëà Log ID

      if (step === 3 && selectedCharger && selectedCharger.id) {
        const url = `/stations/ports/${encodeURIComponent(
          selectedCharger.id
        )}/slots`;
        console.log("‚úÖ G·ªçi API v·ªõi URL:", url);
        setSlotsLoading(true);
        setSlotsError(null);
        try {
          const { data } = await api.get(url);
          console.log("‚úÖ Response t·ª´ API slots:", data); // üëà Log response
          console.log("‚úÖ data.items:", data?.items);
          setSlots(data?.items || []);
        } catch (e) {
          console.error("‚ùå L·ªói khi g·ªçi API slots:", e);
          setSlotsError(`Kh√¥ng th·ªÉ t·∫£i slot. Chi ti·∫øt: ${e.message}`);
        } finally {
          setSlotsLoading(false);
        }
      } else {
        setSlots([]);
      }
    }
    fetchSlots();
  }, [step, selectedCharger]);

  // L·∫•y danh s√°ch xe khi v√†o trang booking
  useEffect(() => {
    const fetchVehicles = async () => {
      try {
        const res = await api.get("/vehicles");
        const vehiclesList = res.data?.items || [];
        setVehicles(vehiclesList);

        // L·∫•y xe m·∫∑c ƒë·ªãnh t·ª´ localStorage
        const defaultVehicleId = localStorage.getItem("defaultVehicleId");

        if (defaultVehicleId) {
          const defaultVehicle = vehiclesList.find(v => v.id === defaultVehicleId);
          if (defaultVehicle) {
            setSelectedVehicle(defaultVehicle);
            setVehicleId(defaultVehicleId);
          } else if (vehiclesList.length > 0) {
            setSelectedVehicle(vehiclesList[0]);
            setVehicleId(vehiclesList[0].id);
          }
        } else if (vehiclesList.length > 0) {
          setSelectedVehicle(vehiclesList[0]);
          setVehicleId(vehiclesList[0].id);
        }
      } catch (error) {
        console.error("Error fetching vehicles:", error);
      }
    };

    fetchVehicles();
  }, []);

  return (
    <div className="booking-wrapper">
      <div className={`booking-container ${step === 4 ? "confirmation-mode" : ""}`}>
        <div className="left-panel">
          <div className="panel-header">
            <h1>ƒê·∫∑t ch·ªó s·∫°c xe</h1>
            <div className="step-indicator">
              <div className={`step ${step >= 1 ? "active" : ""}`}>
                <span className="step-number">1</span>
                <span className="step-label">Ch·ªçn tr·∫°m</span>
              </div>
              <div className="step-divider"></div>
              <div className={`step ${step >= 2 ? "active" : ""}`}>
                <span className="step-number">2</span>
                <span className="step-label">Ch·ªçn tr·ª•</span>
              </div>
              <div className="step-divider"></div>
              <div className={`step ${step >= 3 ? "active" : ""}`}>
                <span className="step-number">3</span>
                <span className="step-label">Ch·ªçn slot</span>
              </div>
              <div className="step-divider"></div>
              <div className={`step ${step >= 4 ? "active" : ""}`}>
                <span className="step-number">4</span>
                <span className="step-label">X√°c nh·∫≠n</span>
              </div>
            </div>
          </div>

          {/* STEP 1 */}
          {step === 1 && (
            <div className="station-selection">
              <div className="search-filters">
                <div className="search-box">
                  <svg
                    className="search-icon"
                    width="20"
                    height="20"
                    viewBox="0 0 20 20"
                    fill="none"
                  >
                    <path
                      d="M9 17A8 8 0 1 0 9 1a8 8 0 0 0 0 16zM19 19l-4.35-4.35"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />
                  </svg>
                  <input
                    type="text"
                    placeholder="T√¨m ki·∫øm tr·∫°m s·∫°c theo t√™n ho·∫∑c ƒë·ªãa ch·ªâ..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="search-input"
                  />
                  {searchTerm && (
                    <button
                      className="clear-search"
                      onClick={() => setSearchTerm("")}
                    >
                      √ó
                    </button>
                  )}
                </div>

                <select
                  value={filterType}
                  onChange={(e) => setFilterType(e.target.value)}
                  className="filter-select"
                >
                  <option value="all">T·∫•t c·∫£ lo·∫°i tr·∫°m</option>
                  <option value="AC">‚ö° AC - S·∫°c ch·∫≠m</option>
                  <option value="DC">‚ö°‚ö° DC - S·∫°c nhanh</option>
                  <option value="DC ULTRA">‚ö°‚ö°‚ö° DC Ultra - Si√™u nhanh</option>
                </select>

                <select
                  value={districtFilter}
                  onChange={(e) => setDistrictFilter(e.target.value)}
                  className="filter-select"
                >
                  <option value="all">T·∫•t c·∫£ qu·∫≠n</option>
                  {districts.map((d) => (
                    <option key={d} value={d}>
                      {d}
                    </option>
                  ))}
                </select>
              </div>

              {loading && (
                <div className="results-count">ƒêang t·∫£i danh s√°ch tr·∫°m‚Ä¶</div>
              )}
              {error && (
                <div className="results-count" style={{ color: "tomato" }}>
                  L·ªói: {error}
                </div>
              )}

              {!loading && !error && (
                <>
                  <div className="results-count">
                    T√¨m th·∫•y <strong>{filteredStations.length}</strong> tr·∫°m s·∫°c
                  </div>

                  <div className="stations-list">
                    {filteredStations.map((station) => (
                      <div
                        key={station.id}
                        className={`station-card ${station.type
                          .toLowerCase()
                          .replace(" ", "-")} ${selectedStation?.id === station.id ? "selected" : ""
                          }`}
                        onClick={() => {
                          setSelectedStation(station);
                          setSelectedCharger(null);
                          setStep(2);
                        }}
                      >
                        <div className="station-header">
                          <h3 className="station-name">{station.name}</h3>
                          {station.distance && (
                            <div className="station-distance">
                              {station.distance}
                            </div>
                          )}
                        </div>

                        <div className="station-availability">
                          <div className="availability-bar">
                            <div
                              className="availability-fill"
                              style={{
                                width: `${station.total
                                    ? (station.available / station.total) * 100
                                    : 0
                                  }%`,
                              }}
                            ></div>
                          </div>
                          <span className="availability-text">
                            {station.available}/{station.total} tr·ª• kh·∫£ d·ª•ng
                          </span>
                        </div>
                      </div>
                    ))}
                  </div>

                  {filteredStations.length === 0 && (
                    <div className="no-results">
                      <svg
                        width="64"
                        height="64"
                        viewBox="0 0 24 24"
                        fill="none"
                      >
                        <circle
                          cx="12"
                          cy="12"
                          r="10"
                          stroke="currentColor"
                          strokeWidth="2"
                        />
                        <path
                          d="M12 8v4M12 16h.01"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                        />
                      </svg>
                      <p>Kh√¥ng t√¨m th·∫•y tr·∫°m s·∫°c ph√π h·ª£p</p>
                      <button
                        onClick={() => {
                          setSearchTerm("");
                          setFilterType("all");
                        }}
                      >
                        X√≥a b·ªô l·ªçc
                      </button>
                    </div>
                  )}
                </>
              )}
            </div>
          )}

          {/* STEP 2 */}
          {step === 2 && selectedStation && (
            <div className="charger-selection">
              <div className="selected-station-info">
                <button
                  className="back-button"
                  onClick={() => {
                    setStep(1);
                    setSelectedCharger(null);
                  }}
                >
                  <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                    <path
                      d="M12 4L6 10l6 6"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />
                  </svg>
                  Quay l·∫°i
                </button>
                <h2>{selectedStation.name}</h2>
              </div>

              <p className="selection-hint">
                Ch·ªçn tr·ª• s·∫°c t∆∞∆°ng th√≠ch v·ªõi xe c·ªßa b·∫°n
              </p>

              <div className="chargers-grid">
                {chargers.map((charger) => (
                  <div
                    key={charger.id}
                    className={`charger-card ${charger.status} ${selectedCharger?.id === charger.id ? "selected" : ""
                      }`}
                    onClick={() => {
                      if (charger.status === "available") {
                        console.log("‚úÖ Charger ƒë∆∞·ª£c ch·ªçn:", charger);
                        if (!charger.id) {
                          console.error("‚ùå Charger kh√¥ng c√≥ id!");
                          return;
                        }
                        setSelectedCharger(charger);
                        setStep(3);
                      }
                    }}
                  >
                    <div className="charger-header">
                      <h3>{charger.name}</h3>
                      <div
                        className={`speed-badge ${String(charger.speedLabel)
                          .toLowerCase()
                          .replace(/\s+/g, "_")}`}
                      >
                        {charger.speedLabel}
                      </div>
                      <span className={`status-badge ${charger.status}`}>
                        {charger.status === "available" && "‚úì S·∫µn s√†ng"}
                        {charger.status === "in_use" && "‚è± ƒêang s·ª≠ d·ª•ng"}
                      </span>
                    </div>
                    <div className="type-row">
                      <span
                        className={`type-badge ${String(charger.typeLabel)
                          .toLowerCase()
                          .replace(/\s+/g, "-")}`}
                      >
                        {charger.typeLabel}
                      </span>
                    </div>

                    <div className="charger-specs">
                      <div className="spec-item">
                        <span className="spec-icon">‚ö°</span>
                        <div>
                          <div className="spec-label">C√¥ng su·∫•t</div>
                          <div className="spec-value">{charger.power}</div>
                        </div>
                      </div>

                      <div className="spec-item">
                        <span className="spec-icon">üí∞</span>
                        <div>
                          <div className="spec-label">Gi√°</div>
                          <div className="spec-value">{charger.price}</div>
                        </div>
                      </div>
                    </div>

                    <div className="charger-connector">
                      <span className="connector-label">ƒê·∫ßu c·∫Øm:</span>
                      <span className="connector-type">
                        {charger.connector}
                      </span>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* STEP 3: Slot selection */}
          {step === 3 && selectedCharger && (
            <div className="slot-selection">
              <button className="back-button" onClick={() => setStep(2)}>
                <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                  <path
                    d="M12 4L6 10l6 6"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                </svg>
                Quay l·∫°i
              </button>
              <h2>Ch·ªçn slot cho tr·ª• s·∫°c</h2>
              {slotsLoading && <div>ƒêang t·∫£i slot‚Ä¶</div>}
              {slotsError && (
                <div style={{ color: "tomato" }}>L·ªói: {slotsError}</div>
              )}
              {!slotsLoading && !slotsError && (
                <div className="slots-grid">
                  {slots.length === 0 && <div>Kh√¥ng c√≥ slot kh·∫£ d·ª•ng</div>}
                  {slots.map((slot) => (
                    <div
                      key={slot.id}
                      className={`slot-card ${slot.status} ${selectedSlot?.id === slot.id ? "selected" : ""
                        }`}
                      onClick={() => {
                        if (slot.status === "booked") {
                          alert(
                            "‚ùå Slot n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t. Vui l√≤ng ch·ªçn slot kh√°c!"
                          );
                          return;
                        }
                        setSelectedSlot(slot);
                      }}
                    >
                      <div className="slot-time">{slot.time}</div>
                      <div className="slot-status">{slot.status}</div>
                    </div>
                  ))}
                </div>
              )}
              {/* <button 
                className="refresh-button" 
                onClick={() => {
                // G·ªçi l·∫°i API slots ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i m·ªõi nh·∫•t
                fetchSlots(); // ho·∫∑c g·ªçi l·∫°i useEffect
              }}
              >
               üîÑ L√†m m·ªõi slot
              </button> */}
              <button
                className="next-button"
                disabled={!selectedSlot}
                onClick={() => selectedSlot && setStep(4)}
              >
                Ti·∫øp t·ª•c x√°c nh·∫≠n
              </button>
            </div>
          )}

          {/* STEP 4: Confirmation */}
          {step === 4 && selectedStation && selectedCharger && selectedSlot && (
            <div className="booking-confirmation">
              <button className="back-button" onClick={() => setStep(2)}>
                <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                  <path
                    d="M12 4L6 10l6 6"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                </svg>
                Quay l·∫°i
              </button>

              <div className="confirmation-content">
                <div className="confirmation-header">
                  <div className="success-icon">‚úì</div>
                  <h2>X√°c nh·∫≠n ƒë·∫∑t ch·ªó</h2>
                  <p className="confirmation-subtitle">
                    Vui l√≤ng ki·ªÉm tra th√¥ng tin v√† x√°c nh·∫≠n ƒë·∫∑t ch·ªó c·ªßa b·∫°n
                  </p>
                </div>

                <div className="confirmation-grid">
                  <div className="summary-section">
                    {/* Vehicle Selection Card */}
                    <div className="summary-card vehicle-selection-card">
                      <h3 style={{ textAlign: "center" }}>Xe c·ªßa b·∫°n</h3>
                      {selectedVehicle ? (
                        <>
                          <div className="selected-vehicle-info">
                            <div className="summary-item">
                              <span className="summary-label">Bi·ªÉn s·ªë:</span>
                              <span className="summary-value">{selectedVehicle.plateNumber}</span>
                            </div>
                            <div className="summary-item">
                              <span className="summary-label">Xe:</span>
                              <span className="summary-value">{selectedVehicle.make} {selectedVehicle.model}</span>
                            </div>
                            <div className="summary-item">
                              <span className="summary-label">Lo·∫°i s·∫°c:</span>
                              <span className="summary-value">{selectedVehicle.connectorType}</span>
                            </div>
                          </div>
                          <button
                            className="change-vehicle-btn"
                            onClick={() => setShowVehicleModal(true)}
                          >
                            ƒê·ªïi xe kh√°c
                          </button>
                        </>
                      ) : (
                        <button
                          className="select-vehicle-btn"
                          onClick={() => setShowVehicleModal(true)}
                        >
                          Ch·ªçn xe
                        </button>
                      )}
                    </div>

                    <div className="summary-card station-card">
                      <h3 style={{ textAlign: "center" }}>
                        Th√¥ng tin tr·∫°m s·∫°c
                      </h3>
                      <div className="summary-item">
                        <span className="summary-label">T√™n tr·∫°m:</span>
                        <span className="summary-value">
                          {selectedStation.name}
                        </span>
                      </div>
                      <div className="summary-item">
                        <span className="summary-label">ƒê·ªãa ch·ªâ:</span>
                        <span className="summary-value">
                          {selectedStation.address}
                        </span>
                      </div>
                      <div className="summary-item">
                        <span className="summary-label">Lo·∫°i tr·∫°m:</span>
                        <span className="summary-value">
                          {selectedStation.type}
                        </span>
                      </div>
                    </div>

                    <div className="summary-card charger-card">
                      <h3 style={{ textAlign: "center" }}>Th√¥ng tin tr·ª• s·∫°c</h3>
                      <div className="summary-item">
                        <span className="summary-label">Tr·ª• s·∫°c:</span>
                        <span className="summary-value">
                          {selectedCharger.name}
                        </span>
                      </div>
                      <div className="summary-item highlight-item">
                        <span className="summary-label">C√¥ng su·∫•t:</span>
                        <span className="summary-value highlight">
                          ‚ö° {selectedCharger.power}
                        </span>
                      </div>
                      <div className="summary-item highlight-item">
                        <span className="summary-label">Gi√°:</span>
                        <span className="summary-value highlight">
                          üí∞ {selectedCharger.price}
                        </span>
                      </div>
                      <div className="summary-item">
                        <span className="summary-label">ƒê·∫ßu c·∫Øm:</span>
                        <span className="summary-value">
                          {selectedCharger.connector}
                        </span>
                      </div>
                      <div className="summary-item">
                        <span className="summary-label">Tr·∫°ng th√°i:</span>
                        <span className="summary-value status-available">
                          ‚úì S·∫µn s√†ng
                        </span>
                      </div>
                    </div>
                  </div>

                  <div className="form-section">
                    <form className="booking-form" onSubmit={handleSubmit}>
                      <div className="form-header">
                        <h3>Th·ªùi gian s·∫°c</h3>
                        <p>Ch·ªçn th·ªùi gian b·∫°n mu·ªën b·∫Øt ƒë·∫ßu s·∫°c xe</p>
                      </div>

                      <div className="form-group">
                        <label htmlFor="date">
                          <svg
                            width="20"
                            height="20"
                            viewBox="0 0 20 20"
                            fill="none"
                          >
                            <rect
                              x="3"
                              y="4"
                              width="14"
                              height="14"
                              rx="2"
                              stroke="currentColor"
                              strokeWidth="2"
                            />
                            <path
                              d="M3 8h14M7 2v4M13 2v4"
                              stroke="currentColor"
                              strokeWidth="2"
                              strokeLinecap="round"
                            />
                          </svg>
                          Ng√†y s·∫°c
                        </label>
                        <div className="custom-datetime-picker">
                          <div
                            className="datetime-display"
                            onClick={() => setShowDateModal(true)}
                          >
                            <div className="datetime-value">
                              <span className="datetime-icon">üìÖ</span>
                              <span>{formatDate(formData.date)}</span>
                            </div>
                            <span className="datetime-arrow">‚Üí</span>
                          </div>
                          {/* <div className="datetime-helper">üí° Nh·∫•n ƒë·ªÉ ch·ªçn 1 trong 3 ng√†y</div> */}
                        </div>
                      </div>

                      <div className="form-group">
                        <label htmlFor="startTime">
                          <svg
                            width="20"
                            height="20"
                            viewBox="0 0 20 20"
                            fill="none"
                          >
                            <circle
                              cx="10"
                              cy="10"
                              r="8"
                              stroke="currentColor"
                              strokeWidth="2"
                            />
                            <path
                              d="M10 6v4l3 2"
                              stroke="currentColor"
                              strokeWidth="2"
                              strokeLinecap="round"
                            />
                          </svg>
                          Gi·ªù b·∫Øt ƒë·∫ßu
                        </label>
                        <div className="custom-datetime-picker">
                          <div
                            className="datetime-display"
                            onClick={() => setShowTimeModal(true)}
                          >
                            <div className="datetime-value">
                              <span className="datetime-icon">üïê</span>
                              <span>{formData.startTime}</span>
                            </div>
                            <span className="datetime-arrow">‚Üí</span>
                          </div>
                          {/* <div className="datetime-helper">üí° Ch·ªçn theo b∆∞·ªõc 15 ph√∫t, kh√¥ng ch·ªçn qu√° kh·ª©</div> */}
                        </div>
                      </div>

                      <div className="form-group">
                        <label htmlFor="endTime">
                          <svg
                            width="20"
                            height="20"
                            viewBox="0 0 20 20"
                            fill="none"
                          >
                            <circle
                              cx="10"
                              cy="10"
                              r="8"
                              stroke="currentColor"
                              strokeWidth="2"
                            />
                            <path
                              d="M10 6v4l3 2"
                              stroke="currentColor"
                              strokeWidth="2"
                              strokeLinecap="round"
                            />
                          </svg>
                          Gi·ªù k·∫øt th√∫c
                        </label>
                        <div className="custom-datetime-picker">
                          <div
                            className="datetime-display"
                            onClick={() => setShowEndTimeModal(true)}
                          >
                            <div className="datetime-value">
                              <span className="datetime-icon">‚è±Ô∏è</span>
                              <span>
                                {formData.endTime || endTimeSlots[0] || "--:--"}
                              </span>
                            </div>
                            <span className="datetime-arrow">‚Üí</span>
                          </div>
                          {/* <div className="datetime-helper">üí° Ch·ªâ +30m, +60m, +90m sau gi·ªù b·∫Øt ƒë·∫ßu</div> */}
                        </div>
                      </div>

                      {/* <div className="price-estimate">
                        <div className="estimate-label">∆Ø·ªõc t√≠nh chi ph√≠:</div>
                        <div className="estimate-value">{priceEstimate1h}</div>
                      </div> */}

                      <button type="submit" className="submit-button">
                        <span>X√°c nh·∫≠n </span>
                        <svg
                          width="20"
                          height="20"
                          viewBox="0 0 20 20"
                          fill="none"
                        >
                          <path
                            d="M4 10h12M12 6l4 4-4 4"
                            stroke="currentColor"
                            strokeWidth="2"
                            strokeLinecap="round"
                            strokeLinejoin="round"
                          />
                        </svg>
                      </button>
                    </form>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* RIGHT PANEL: MAP */}
        {step !== 4 && (
          <div className="right-panel">
            <div className="map-container">
              {step === 1 && (
                <ChargingMap
                  stations={filteredStations}
                  center={selectedStation?.coords || defaultCenter}
                  zoom={selectedStation ? 16 : 13}
                  onSelect={(s) => setSelectedStation(s)}
                  selectedStation={selectedStation}
                />
              )}

              {step === 2 && selectedStation && (
                <ChargingMap
                  stations={chargers}
                  center={selectedStation.coords}
                  zoom={17}
                  onSelect={(c) => {
                    if (c.status === "available") {
                      setSelectedCharger(c);
                      setStep(3);
                    }
                  }}
                  selectedStation={selectedCharger}
                />
              )}
            </div>
          </div>
        )}
      </div>

      {/* Vehicle Selection Modal */}
      {showVehicleModal && (
        <div className="datetime-modal-overlay" onClick={() => setShowVehicleModal(false)}>
          <div className="vehicle-modal" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h3>Ch·ªçn xe c·ªßa b·∫°n</h3>
              <button className="modal-close" onClick={() => setShowVehicleModal(false)}>√ó</button>
            </div>
            <div className="modal-body">
              {vehicles.length === 0 ? (
                <div className="no-vehicles">
                  <p>B·∫°n ch∆∞a c√≥ xe n√†o. Vui l√≤ng th√™m xe trong trang Profile.</p>
                  <button onClick={() => navigate('/profile')}>ƒêi ƒë·∫øn Profile</button>
                </div>
              ) : (
                <div className="vehicles-grid-modal">
                  {vehicles.map((vehicle) => (
                    <div
                      key={vehicle.id}
                      className={`vehicle-card-modal ${selectedVehicle?.id === vehicle.id ? 'selected' : ''}`}
                      onClick={() => {
                        setSelectedVehicle(vehicle);
                        setVehicleId(vehicle.id);
                        setShowVehicleModal(false);
                      }}
                    >
                      <div className="vehicle-plate">{vehicle.plateNumber}</div>
                      <div className="vehicle-model">{vehicle.make} {vehicle.model}</div>
                      <div className="vehicle-type">{vehicle.connectorType}</div>
                      {localStorage.getItem("defaultVehicleId") === vehicle.id && (
                        <span className="default-badge-modal">M·∫∑c ƒë·ªãnh</span>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {/* MODALS */}
      {showDateModal && (
        <div
          className="datetime-modal-overlay"
          onClick={() => setShowDateModal(false)}
        >
          <div className="datetime-modal" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h3>Ch·ªçn ng√†y s·∫°c</h3>
              <button
                className="modal-close"
                onClick={() => setShowDateModal(false)}
              >
                √ó
              </button>
            </div>
            <div className="modal-body">
              <div className="date-options">
                {dateOptions.map((d) => (
                  <button
                    key={d.iso}
                    className={`date-card ${formData.date === d.iso ? "selected" : ""
                      }`}
                    onClick={() => {
                      setFormData((prev) => ({ ...prev, date: d.iso }));
                      setShowDateModal(false);
                    }}
                  >
                    {d.label}
                  </button>
                ))}
              </div>
            </div>
          </div>
        </div>
      )}

      {showTimeModal && (
        <div
          className="datetime-modal-overlay"
          onClick={() => setShowTimeModal(false)}
        >
          <div className="datetime-modal" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h3>Ch·ªçn gi·ªù b·∫Øt ƒë·∫ßu</h3>
              <button
                className="modal-close"
                onClick={() => setShowTimeModal(false)}
              >
                √ó
              </button>
            </div>
            <div className="modal-body">
              <div className="time-grid">
                {timeSlots.length === 0 && (
                  <div className="no-time">H·∫øt khung gi·ªù trong h√¥m nay</div>
                )}
                {timeSlots.map((t) => (
                  <button
                    key={t}
                    className={`time-slot ${formData.startTime === t ? "selected" : ""
                      }`}
                    onClick={() => {
                      setFormData((prev) => ({ ...prev, startTime: t }));
                      setShowTimeModal(false);
                    }}
                  >
                    {t}
                  </button>
                ))}
              </div>
            </div>
          </div>
        </div>
      )}

      {showEndTimeModal && (
        <div
          className="datetime-modal-overlay"
          onClick={() => setShowEndTimeModal(false)}
        >
          <div className="datetime-modal" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h3>Ch·ªçn gi·ªù k·∫øt th√∫c</h3>
              <button
                className="modal-close"
                onClick={() => setShowEndTimeModal(false)}
              >
                √ó
              </button>
            </div>
            <div className="modal-body">
              <div className="time-grid">
                {endTimeSlots.length === 0 && (
                  <div className="no-time">Kh√¥ng c√≤n khung gi·ªù ph√π h·ª£p</div>
                )}
                {endTimeSlots.map((t) => (
                  <button
                    key={t}
                    className={`time-slot ${formData.endTime === t ? "selected" : ""
                      }`}
                    onClick={() => {
                      setFormData((prev) => ({ ...prev, endTime: t }));
                      setShowEndTimeModal(false);
                    }}
                  >
                    {t}
                  </button>
                ))}
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
